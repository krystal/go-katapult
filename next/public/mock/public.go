// Code generated by MockGen. DO NOT EDIT.
// Source: ./public/public.go
//
// Generated by this command:
//
//	mockgen -source=./public/public.go -destination=./public/mock/public.go
//

// Package mock_public is a generated GoMock package.
package mock_public

import (
	context "context"
	io "io"
	http "net/http"
	reflect "reflect"

	public "github.com/krystal/go-katapult/next/public"
	gomock "go.uber.org/mock/gomock"
)

// MockHttpRequestDoer is a mock of HttpRequestDoer interface.
type MockHttpRequestDoer struct {
	ctrl     *gomock.Controller
	recorder *MockHttpRequestDoerMockRecorder
}

// MockHttpRequestDoerMockRecorder is the mock recorder for MockHttpRequestDoer.
type MockHttpRequestDoerMockRecorder struct {
	mock *MockHttpRequestDoer
}

// NewMockHttpRequestDoer creates a new mock instance.
func NewMockHttpRequestDoer(ctrl *gomock.Controller) *MockHttpRequestDoer {
	mock := &MockHttpRequestDoer{ctrl: ctrl}
	mock.recorder = &MockHttpRequestDoerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpRequestDoer) EXPECT() *MockHttpRequestDoerMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHttpRequestDoer) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHttpRequestDoerMockRecorder) Do(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHttpRequestDoer)(nil).Do), req)
}

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// GetDataCenters mocks base method.
func (m *MockClientInterface) GetDataCenters(ctx context.Context, reqEditors ...public.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDataCenters", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataCenters indicates an expected call of GetDataCenters.
func (mr *MockClientInterfaceMockRecorder) GetDataCenters(ctx any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataCenters", reflect.TypeOf((*MockClientInterface)(nil).GetDataCenters), varargs...)
}

// GetPricingPrices mocks base method.
func (m *MockClientInterface) GetPricingPrices(ctx context.Context, reqEditors ...public.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPricingPrices", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPricingPrices indicates an expected call of GetPricingPrices.
func (mr *MockClientInterfaceMockRecorder) GetPricingPrices(ctx any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPricingPrices", reflect.TypeOf((*MockClientInterface)(nil).GetPricingPrices), varargs...)
}

// GetStats mocks base method.
func (m *MockClientInterface) GetStats(ctx context.Context, reqEditors ...public.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStats", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStats indicates an expected call of GetStats.
func (mr *MockClientInterfaceMockRecorder) GetStats(ctx any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockClientInterface)(nil).GetStats), varargs...)
}

// GetVirtualMachinePackages mocks base method.
func (m *MockClientInterface) GetVirtualMachinePackages(ctx context.Context, params *public.GetVirtualMachinePackagesParams, reqEditors ...public.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVirtualMachinePackages", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualMachinePackages indicates an expected call of GetVirtualMachinePackages.
func (mr *MockClientInterfaceMockRecorder) GetVirtualMachinePackages(ctx, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualMachinePackages", reflect.TypeOf((*MockClientInterface)(nil).GetVirtualMachinePackages), varargs...)
}

// PostPricingEstimate mocks base method.
func (m *MockClientInterface) PostPricingEstimate(ctx context.Context, body public.PostPricingEstimateJSONRequestBody, reqEditors ...public.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostPricingEstimate", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostPricingEstimate indicates an expected call of PostPricingEstimate.
func (mr *MockClientInterfaceMockRecorder) PostPricingEstimate(ctx, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostPricingEstimate", reflect.TypeOf((*MockClientInterface)(nil).PostPricingEstimate), varargs...)
}

// PostPricingEstimateWithBody mocks base method.
func (m *MockClientInterface) PostPricingEstimateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...public.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostPricingEstimateWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostPricingEstimateWithBody indicates an expected call of PostPricingEstimateWithBody.
func (mr *MockClientInterfaceMockRecorder) PostPricingEstimateWithBody(ctx, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostPricingEstimateWithBody", reflect.TypeOf((*MockClientInterface)(nil).PostPricingEstimateWithBody), varargs...)
}

// PostSignups mocks base method.
func (m *MockClientInterface) PostSignups(ctx context.Context, body public.PostSignupsJSONRequestBody, reqEditors ...public.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostSignups", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostSignups indicates an expected call of PostSignups.
func (mr *MockClientInterfaceMockRecorder) PostSignups(ctx, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostSignups", reflect.TypeOf((*MockClientInterface)(nil).PostSignups), varargs...)
}

// PostSignupsWithBody mocks base method.
func (m *MockClientInterface) PostSignupsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...public.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostSignupsWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostSignupsWithBody indicates an expected call of PostSignupsWithBody.
func (mr *MockClientInterfaceMockRecorder) PostSignupsWithBody(ctx, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostSignupsWithBody", reflect.TypeOf((*MockClientInterface)(nil).PostSignupsWithBody), varargs...)
}

// MockClientWithResponsesInterface is a mock of ClientWithResponsesInterface interface.
type MockClientWithResponsesInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientWithResponsesInterfaceMockRecorder
}

// MockClientWithResponsesInterfaceMockRecorder is the mock recorder for MockClientWithResponsesInterface.
type MockClientWithResponsesInterfaceMockRecorder struct {
	mock *MockClientWithResponsesInterface
}

// NewMockClientWithResponsesInterface creates a new mock instance.
func NewMockClientWithResponsesInterface(ctrl *gomock.Controller) *MockClientWithResponsesInterface {
	mock := &MockClientWithResponsesInterface{ctrl: ctrl}
	mock.recorder = &MockClientWithResponsesInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientWithResponsesInterface) EXPECT() *MockClientWithResponsesInterfaceMockRecorder {
	return m.recorder
}

// GetDataCentersWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetDataCentersWithResponse(ctx context.Context, reqEditors ...public.RequestEditorFn) (*public.GetDataCentersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDataCentersWithResponse", varargs...)
	ret0, _ := ret[0].(*public.GetDataCentersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataCentersWithResponse indicates an expected call of GetDataCentersWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetDataCentersWithResponse(ctx any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataCentersWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetDataCentersWithResponse), varargs...)
}

// GetPricingPricesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetPricingPricesWithResponse(ctx context.Context, reqEditors ...public.RequestEditorFn) (*public.GetPricingPricesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPricingPricesWithResponse", varargs...)
	ret0, _ := ret[0].(*public.GetPricingPricesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPricingPricesWithResponse indicates an expected call of GetPricingPricesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetPricingPricesWithResponse(ctx any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPricingPricesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetPricingPricesWithResponse), varargs...)
}

// GetStatsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetStatsWithResponse(ctx context.Context, reqEditors ...public.RequestEditorFn) (*public.GetStatsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStatsWithResponse", varargs...)
	ret0, _ := ret[0].(*public.GetStatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatsWithResponse indicates an expected call of GetStatsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetStatsWithResponse(ctx any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetStatsWithResponse), varargs...)
}

// GetVirtualMachinePackagesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetVirtualMachinePackagesWithResponse(ctx context.Context, params *public.GetVirtualMachinePackagesParams, reqEditors ...public.RequestEditorFn) (*public.GetVirtualMachinePackagesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVirtualMachinePackagesWithResponse", varargs...)
	ret0, _ := ret[0].(*public.GetVirtualMachinePackagesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualMachinePackagesWithResponse indicates an expected call of GetVirtualMachinePackagesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetVirtualMachinePackagesWithResponse(ctx, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualMachinePackagesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetVirtualMachinePackagesWithResponse), varargs...)
}

// PostPricingEstimateWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostPricingEstimateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...public.RequestEditorFn) (*public.PostPricingEstimateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostPricingEstimateWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*public.PostPricingEstimateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostPricingEstimateWithBodyWithResponse indicates an expected call of PostPricingEstimateWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostPricingEstimateWithBodyWithResponse(ctx, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostPricingEstimateWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostPricingEstimateWithBodyWithResponse), varargs...)
}

// PostPricingEstimateWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostPricingEstimateWithResponse(ctx context.Context, body public.PostPricingEstimateJSONRequestBody, reqEditors ...public.RequestEditorFn) (*public.PostPricingEstimateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostPricingEstimateWithResponse", varargs...)
	ret0, _ := ret[0].(*public.PostPricingEstimateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostPricingEstimateWithResponse indicates an expected call of PostPricingEstimateWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostPricingEstimateWithResponse(ctx, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostPricingEstimateWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostPricingEstimateWithResponse), varargs...)
}

// PostSignupsWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostSignupsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...public.RequestEditorFn) (*public.PostSignupsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostSignupsWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*public.PostSignupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostSignupsWithBodyWithResponse indicates an expected call of PostSignupsWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostSignupsWithBodyWithResponse(ctx, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostSignupsWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostSignupsWithBodyWithResponse), varargs...)
}

// PostSignupsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostSignupsWithResponse(ctx context.Context, body public.PostSignupsJSONRequestBody, reqEditors ...public.RequestEditorFn) (*public.PostSignupsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostSignupsWithResponse", varargs...)
	ret0, _ := ret[0].(*public.PostSignupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostSignupsWithResponse indicates an expected call of PostSignupsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostSignupsWithResponse(ctx, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostSignupsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostSignupsWithResponse), varargs...)
}
