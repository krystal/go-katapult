package katapult

import (
	"encoding/json"
	"fmt"
)

// Code generated by github.com/krystal/go-katapult/tools/codegen. DO NOT EDIT.

var ErrScopeNotGranted = fmt.Errorf("%w: scope_not_granted", ErrForbidden)

// ScopeNotGrantedError:
// The scope required for this endpoint has not been granted to the authenticating identity
type ScopeNotGrantedError struct {
	CommonError
	Detail *ScopeNotGrantedErrorDetail `json:"detail,omitempty"`
}

func NewScopeNotGrantedError(theError *ResponseError) *ScopeNotGrantedError {
	detail := &ScopeNotGrantedErrorDetail{}
	err := json.Unmarshal(theError.Detail, detail)
	if err != nil {
		detail = nil
	}

	return &ScopeNotGrantedError{
		CommonError: NewCommonError(
			ErrScopeNotGranted,
			"scope_not_granted",
			theError.Description,
		),
		Detail: detail,
	}
}

type ScopeNotGrantedErrorDetail struct {
	Scopes []string `json:"scopes,omitempty"`
}

// castResponseError casts a *katapult.ResponseError to a more specific type based on the error's Code value.
func castResponseError(theError *ResponseError) error {
	switch theError.Code {
	case "scope_not_granted":
		return NewScopeNotGrantedError(theError)
	default:
		return theError
	}
}
